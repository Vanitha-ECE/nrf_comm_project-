

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Jul 31 07:12:05 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0004                     fsr             equ	4
    53     0004                     fsr0            equ	4
    54     0000                     indf            equ	0
    55     0000                     indf0           equ	0
    56     0002                     pc              equ	2
    57     0002                     pcl             equ	2
    58     000A                     pclath          equ	10
    59     0003                     status          equ	3
    60     0000                     INDF            equ	0	;# 
    61     0001                     TMR0            equ	1	;# 
    62     0002                     PCL             equ	2	;# 
    63     0003                     STATUS          equ	3	;# 
    64     0004                     FSR             equ	4	;# 
    65     0005                     PORTA           equ	5	;# 
    66     0006                     PORTB           equ	6	;# 
    67     0007                     PORTC           equ	7	;# 
    68     0008                     PORTD           equ	8	;# 
    69     0009                     PORTE           equ	9	;# 
    70     000A                     PCLATH          equ	10	;# 
    71     000B                     INTCON          equ	11	;# 
    72     000C                     PIR1            equ	12	;# 
    73     000D                     PIR2            equ	13	;# 
    74     000E                     TMR1            equ	14	;# 
    75     000E                     TMR1L           equ	14	;# 
    76     000F                     TMR1H           equ	15	;# 
    77     0010                     T1CON           equ	16	;# 
    78     0011                     TMR2            equ	17	;# 
    79     0012                     T2CON           equ	18	;# 
    80     0013                     SSPBUF          equ	19	;# 
    81     0014                     SSPCON          equ	20	;# 
    82     0015                     CCPR1           equ	21	;# 
    83     0015                     CCPR1L          equ	21	;# 
    84     0016                     CCPR1H          equ	22	;# 
    85     0017                     CCP1CON         equ	23	;# 
    86     0018                     RCSTA           equ	24	;# 
    87     0019                     TXREG           equ	25	;# 
    88     001A                     RCREG           equ	26	;# 
    89     001B                     CCPR2           equ	27	;# 
    90     001B                     CCPR2L          equ	27	;# 
    91     001C                     CCPR2H          equ	28	;# 
    92     001D                     CCP2CON         equ	29	;# 
    93     001E                     ADRESH          equ	30	;# 
    94     001F                     ADCON0          equ	31	;# 
    95     0081                     OPTION_REG      equ	129	;# 
    96     0085                     TRISA           equ	133	;# 
    97     0086                     TRISB           equ	134	;# 
    98     0087                     TRISC           equ	135	;# 
    99     0088                     TRISD           equ	136	;# 
   100     0089                     TRISE           equ	137	;# 
   101     008C                     PIE1            equ	140	;# 
   102     008D                     PIE2            equ	141	;# 
   103     008E                     PCON            equ	142	;# 
   104     0091                     SSPCON2         equ	145	;# 
   105     0092                     PR2             equ	146	;# 
   106     0093                     SSPADD          equ	147	;# 
   107     0094                     SSPSTAT         equ	148	;# 
   108     0098                     TXSTA           equ	152	;# 
   109     0099                     SPBRG           equ	153	;# 
   110     009C                     CMCON           equ	156	;# 
   111     009D                     CVRCON          equ	157	;# 
   112     009E                     ADRESL          equ	158	;# 
   113     009F                     ADCON1          equ	159	;# 
   114     010C                     EEDATA          equ	268	;# 
   115     010D                     EEADR           equ	269	;# 
   116     010E                     EEDATH          equ	270	;# 
   117     010F                     EEADRH          equ	271	;# 
   118     018C                     EECON1          equ	396	;# 
   119     018D                     EECON2          equ	397	;# 
   120     0000                     INDF            equ	0	;# 
   121     0001                     TMR0            equ	1	;# 
   122     0002                     PCL             equ	2	;# 
   123     0003                     STATUS          equ	3	;# 
   124     0004                     FSR             equ	4	;# 
   125     0005                     PORTA           equ	5	;# 
   126     0006                     PORTB           equ	6	;# 
   127     0007                     PORTC           equ	7	;# 
   128     0008                     PORTD           equ	8	;# 
   129     0009                     PORTE           equ	9	;# 
   130     000A                     PCLATH          equ	10	;# 
   131     000B                     INTCON          equ	11	;# 
   132     000C                     PIR1            equ	12	;# 
   133     000D                     PIR2            equ	13	;# 
   134     000E                     TMR1            equ	14	;# 
   135     000E                     TMR1L           equ	14	;# 
   136     000F                     TMR1H           equ	15	;# 
   137     0010                     T1CON           equ	16	;# 
   138     0011                     TMR2            equ	17	;# 
   139     0012                     T2CON           equ	18	;# 
   140     0013                     SSPBUF          equ	19	;# 
   141     0014                     SSPCON          equ	20	;# 
   142     0015                     CCPR1           equ	21	;# 
   143     0015                     CCPR1L          equ	21	;# 
   144     0016                     CCPR1H          equ	22	;# 
   145     0017                     CCP1CON         equ	23	;# 
   146     0018                     RCSTA           equ	24	;# 
   147     0019                     TXREG           equ	25	;# 
   148     001A                     RCREG           equ	26	;# 
   149     001B                     CCPR2           equ	27	;# 
   150     001B                     CCPR2L          equ	27	;# 
   151     001C                     CCPR2H          equ	28	;# 
   152     001D                     CCP2CON         equ	29	;# 
   153     001E                     ADRESH          equ	30	;# 
   154     001F                     ADCON0          equ	31	;# 
   155     0081                     OPTION_REG      equ	129	;# 
   156     0085                     TRISA           equ	133	;# 
   157     0086                     TRISB           equ	134	;# 
   158     0087                     TRISC           equ	135	;# 
   159     0088                     TRISD           equ	136	;# 
   160     0089                     TRISE           equ	137	;# 
   161     008C                     PIE1            equ	140	;# 
   162     008D                     PIE2            equ	141	;# 
   163     008E                     PCON            equ	142	;# 
   164     0091                     SSPCON2         equ	145	;# 
   165     0092                     PR2             equ	146	;# 
   166     0093                     SSPADD          equ	147	;# 
   167     0094                     SSPSTAT         equ	148	;# 
   168     0098                     TXSTA           equ	152	;# 
   169     0099                     SPBRG           equ	153	;# 
   170     009C                     CMCON           equ	156	;# 
   171     009D                     CVRCON          equ	157	;# 
   172     009E                     ADRESL          equ	158	;# 
   173     009F                     ADCON1          equ	159	;# 
   174     010C                     EEDATA          equ	268	;# 
   175     010D                     EEADR           equ	269	;# 
   176     010E                     EEDATH          equ	270	;# 
   177     010F                     EEADRH          equ	271	;# 
   178     018C                     EECON1          equ	396	;# 
   179     018D                     EECON2          equ	397	;# 
   180                           
   181                           	psect	idataBANK0
   182     06EE                     __pidataBANK0:
   183                           
   184                           ;initializer for main@F1018
   185     06EE  3448               	retlw	72
   186     06EF  3465               	retlw	101
   187     06F0  346C               	retlw	108
   188     06F1  346C               	retlw	108
   189     06F2  346F               	retlw	111
   190     06F3  3400               	retlw	0
   191     0013                     _SSPBUF         set	19
   192     0014                     _SSPCON         set	20
   193     0038                     _RC0            set	56
   194     0039                     _RC1            set	57
   195     0094                     _SSPSTATbits    set	148
   196     0094                     _SSPSTAT        set	148
   197     0439                     _TRISC1         set	1081
   198     0438                     _TRISC0         set	1080
   199     043D                     _TRISC5         set	1085
   200     043C                     _TRISC4         set	1084
   201     043B                     _TRISC3         set	1083
   202                           
   203                           	psect	cinit
   204     07D8                     start_initialization:	
   205                           ; #config settings
   206                           
   207     07D8                     __initialization:
   208                           
   209                           ; Initialize objects allocated to BANK0
   210     07D8  120A  118A  26EE  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   211     07DD  00A0               	movwf	__pdataBANK0& (0+127)
   212     07DE  120A  118A  26EF  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   213     07E3  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   214     07E4  120A  118A  26F0  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   215     07E9  00A2               	movwf	(__pdataBANK0+2)& (0+127)
   216     07EA  120A  118A  26F1  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   217     07EF  00A3               	movwf	(__pdataBANK0+3)& (0+127)
   218     07F0  120A  118A  26F2  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   219     07F5  00A4               	movwf	(__pdataBANK0+4)& (0+127)
   220     07F6  120A  118A  26F3  120A  118A  	fcall	__pidataBANK0+5	;fetch initializer
   221     07FB  00A5               	movwf	(__pdataBANK0+5)& (0+127)
   222     07FC                     end_of_initialization:	
   223                           ;End of C runtime variable initialization code
   224                           
   225     07FC                     __end_of__initialization:
   226     07FC  0183               	clrf	3
   227     07FD  120A  118A  2F8C   	ljmp	_main	;jump to C main() function
   228                           
   229                           	psect	dataBANK0
   230     0020                     __pdataBANK0:
   231     0020                     main@F1018:
   232     0020                     	ds	6
   233                           
   234                           	psect	cstackCOMMON
   235     0070                     __pcstackCOMMON:
   236     0070                     ?_SPI_Init:
   237     0070                     ?_SPI_Write:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ?_NRF_InitTX:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ?_main:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     SPI_Write@data:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ??_SPI_Init:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ??_SPI_Write:	
   253                           ; 1 bytes @ 0x0
   254                           
   255                           
   256                           ; 1 bytes @ 0x0
   257     0070                     	ds	1
   258     0071                     ?_NRF_WriteReg:
   259     0071                     ?_NRF_WritePayload:	
   260                           ; 1 bytes @ 0x1
   261                           
   262     0071                     NRF_WriteReg@value:	
   263                           ; 1 bytes @ 0x1
   264                           
   265     0071                     NRF_WritePayload@data:	
   266                           ; 1 bytes @ 0x1
   267                           
   268                           
   269                           ; 1 bytes @ 0x1
   270     0071                     	ds	1
   271     0072                     NRF_WriteReg@reg:
   272     0072                     NRF_WritePayload@len:	
   273                           ; 1 bytes @ 0x2
   274                           
   275     0072                     ??_NRF_WriteReg:	
   276                           ; 1 bytes @ 0x2
   277                           
   278                           
   279                           ; 1 bytes @ 0x2
   280     0072                     	ds	1
   281     0073                     ??_NRF_WritePayload:
   282     0073                     ??_NRF_InitTX:	
   283                           ; 1 bytes @ 0x3
   284                           
   285                           
   286                           ; 1 bytes @ 0x3
   287     0073                     	ds	1
   288     0074                     NRF_WritePayload@i:
   289                           
   290                           ; 1 bytes @ 0x4
   291     0074                     	ds	2
   292     0076                     ??_main:
   293                           
   294                           ; 1 bytes @ 0x6
   295     0076                     	ds	3
   296                           
   297                           	psect	cstackBANK0
   298     0026                     __pcstackBANK0:
   299     0026                     main@msg:
   300                           
   301                           ; 6 bytes @ 0x0
   302     0026                     	ds	6
   303                           
   304                           	psect	maintext
   305     078C                     __pmaintext:	
   306 ;;
   307 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   308 ;;
   309 ;; *************** function _main *****************
   310 ;; Defined at:
   311 ;;		line 68 in file "NRF24L01.c"
   312 ;; Parameters:    Size  Location     Type
   313 ;;		None
   314 ;; Auto vars:     Size  Location     Type
   315 ;;  msg             6    0[BANK0 ] unsigned char [6]
   316 ;; Return value:  Size  Location     Type
   317 ;;                  1    wreg      void 
   318 ;; Registers used:
   319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   320 ;; Tracked objects:
   321 ;;		On entry : B00/0
   322 ;;		On exit  : 0/0
   323 ;;		Unchanged: 0/0
   324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   325 ;;      Params:         0       0       0       0       0
   326 ;;      Locals:         0       6       0       0       0
   327 ;;      Temps:          3       0       0       0       0
   328 ;;      Totals:         3       6       0       0       0
   329 ;;Total ram usage:        9 bytes
   330 ;; Hardware stack levels required when called: 3
   331 ;; This function calls:
   332 ;;		_NRF_InitTX
   333 ;;		_NRF_WritePayload
   334 ;;		_SPI_Init
   335 ;; This function is called by:
   336 ;;		Startup code after reset
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340     078C                     _main:	
   341                           ;psect for function _main
   342                           
   343     078C                     l699:	
   344                           ;incstack = 0
   345                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   346                           
   347                           
   348                           ;NRF24L01.c: 69:     TRISC0 = 0;
   349     078C  1683               	bsf	3,5	;RP0=1, select bank1
   350     078D  1303               	bcf	3,6	;RP1=0, select bank1
   351     078E  1007               	bcf	7,0	;volatile
   352                           
   353                           ;NRF24L01.c: 70:     TRISC1 = 0;
   354     078F  1087               	bcf	7,1	;volatile
   355     0790                     l701:
   356                           
   357                           ;NRF24L01.c: 71:     SPI_Init();
   358     0790  120A  118A  2700  120A  118A  	fcall	_SPI_Init
   359     0795                     l703:
   360                           
   361                           ;NRF24L01.c: 72:     NRF_InitTX();
   362     0795  120A  118A  2744  120A  118A  	fcall	_NRF_InitTX
   363     079A                     l705:
   364                           
   365                           ;NRF24L01.c: 74:     unsigned char msg[] = "Hello";
   366     079A  3026               	movlw	main@msg& (0+255)
   367     079B  0084               	movwf	4
   368     079C  1283               	bcf	3,5	;RP0=0, select bank0
   369     079D  1303               	bcf	3,6	;RP1=0, select bank0
   370     079E  0820               	movf	main@F1018,w
   371     079F  1383               	bcf	3,7	;select IRP bank0
   372     07A0  0080               	movwf	0
   373     07A1  0A84               	incf	4,f
   374     07A2  0821               	movf	main@F1018+1,w
   375     07A3  0080               	movwf	0
   376     07A4  0A84               	incf	4,f
   377     07A5  0822               	movf	main@F1018+2,w
   378     07A6  0080               	movwf	0
   379     07A7  0A84               	incf	4,f
   380     07A8  0823               	movf	main@F1018+3,w
   381     07A9  0080               	movwf	0
   382     07AA  0A84               	incf	4,f
   383     07AB  0824               	movf	main@F1018+4,w
   384     07AC  0080               	movwf	0
   385     07AD  0A84               	incf	4,f
   386     07AE  0825               	movf	main@F1018+5,w
   387     07AF  0080               	movwf	0
   388     07B0                     l707:
   389                           
   390                           ;NRF24L01.c: 77:         RC0 = 0;
   391     07B0  1283               	bcf	3,5	;RP0=0, select bank0
   392     07B1  1303               	bcf	3,6	;RP1=0, select bank0
   393     07B2  1007               	bcf	7,0	;volatile
   394     07B3                     l709:
   395                           
   396                           ;NRF24L01.c: 78:         NRF_WritePayload(msg, 5);
   397     07B3  3026               	movlw	(low (main@msg| 0))& (0+255)
   398     07B4  00F1               	movwf	NRF_WritePayload@data
   399     07B5  3005               	movlw	5
   400     07B6  00F2               	movwf	NRF_WritePayload@len
   401     07B7  120A  118A  2721  120A  118A  	fcall	_NRF_WritePayload
   402     07BC                     l711:
   403                           
   404                           ;NRF24L01.c: 79:         RC0 = 1;
   405     07BC  1283               	bcf	3,5	;RP0=0, select bank0
   406     07BD  1303               	bcf	3,6	;RP1=0, select bank0
   407     07BE  1407               	bsf	7,0	;volatile
   408     07BF                     l713:
   409                           
   410                           ;NRF24L01.c: 80:         _delay((unsigned long)((15)*(8000000/4000000.0)));
   411     07BF  3009               	movlw	9
   412     07C0  00F6               	movwf	??_main
   413     07C1                     u57:
   414     07C1  0BF6               	decfsz	??_main,f
   415     07C2  2FC1               	goto	u57
   416     07C3  2FC4               	nop2
   417     07C4                     l715:
   418                           
   419                           ;NRF24L01.c: 81:         RC0 = 0;
   420     07C4  1283               	bcf	3,5	;RP0=0, select bank0
   421     07C5  1303               	bcf	3,6	;RP1=0, select bank0
   422     07C6  1007               	bcf	7,0	;volatile
   423     07C7                     l717:
   424                           
   425                           ;NRF24L01.c: 82:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   426     07C7  300B               	movlw	11
   427     07C8  00F8               	movwf	??_main+2
   428     07C9  3026               	movlw	38
   429     07CA  00F7               	movwf	??_main+1
   430     07CB  305D               	movlw	93
   431     07CC  00F6               	movwf	??_main
   432     07CD                     u67:
   433     07CD  0BF6               	decfsz	??_main,f
   434     07CE  2FCD               	goto	u67
   435     07CF  0BF7               	decfsz	??_main+1,f
   436     07D0  2FCD               	goto	u67
   437     07D1  0BF8               	decfsz	??_main+2,f
   438     07D2  2FCD               	goto	u67
   439     07D3  2FD4               	nop2
   440     07D4  2FB0               	goto	l707
   441     07D5  120A  118A  2800   	ljmp	start
   442     07D8                     __end_of_main:
   443                           
   444                           	psect	text1
   445     0700                     __ptext1:	
   446 ;; *************** function _SPI_Init *****************
   447 ;; Defined at:
   448 ;;		line 25 in file "NRF24L01.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;		None
   451 ;; Auto vars:     Size  Location     Type
   452 ;;		None
   453 ;; Return value:  Size  Location     Type
   454 ;;                  1    wreg      void 
   455 ;; Registers used:
   456 ;;		None
   457 ;; Tracked objects:
   458 ;;		On entry : 0/0
   459 ;;		On exit  : 0/0
   460 ;;		Unchanged: 0/0
   461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   462 ;;      Params:         0       0       0       0       0
   463 ;;      Locals:         0       0       0       0       0
   464 ;;      Temps:          0       0       0       0       0
   465 ;;      Totals:         0       0       0       0       0
   466 ;;Total ram usage:        0 bytes
   467 ;; Hardware stack levels used: 1
   468 ;; This function calls:
   469 ;;		Nothing
   470 ;; This function is called by:
   471 ;;		_main
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475     0700                     _SPI_Init:	
   476                           ;psect for function _SPI_Init
   477                           
   478     0700                     l667:	
   479                           ;incstack = 0
   480                           ; Regs used in _SPI_Init: []
   481                           
   482                           
   483                           ;NRF24L01.c: 26:     TRISC3 = 0;
   484     0700  1683               	bsf	3,5	;RP0=1, select bank1
   485     0701  1303               	bcf	3,6	;RP1=0, select bank1
   486     0702  1187               	bcf	7,3	;volatile
   487                           
   488                           ;NRF24L01.c: 27:     TRISC4 = 1;
   489     0703  1607               	bsf	7,4	;volatile
   490                           
   491                           ;NRF24L01.c: 28:     TRISC5 = 0;
   492     0704  1287               	bcf	7,5	;volatile
   493                           
   494                           ;NRF24L01.c: 29:     SSPSTAT = 0b01000000;
   495     0705  3040               	movlw	64
   496     0706  0094               	movwf	20	;volatile
   497                           
   498                           ;NRF24L01.c: 30:     SSPCON = 0b00100000;
   499     0707  3020               	movlw	32
   500     0708  1283               	bcf	3,5	;RP0=0, select bank0
   501     0709  1303               	bcf	3,6	;RP1=0, select bank0
   502     070A  0094               	movwf	20	;volatile
   503     070B                     l27:
   504     070B  0008               	return
   505     070C                     __end_of_SPI_Init:
   506                           
   507                           	psect	text2
   508     0721                     __ptext2:	
   509 ;; *************** function _NRF_WritePayload *****************
   510 ;; Defined at:
   511 ;;		line 45 in file "NRF24L01.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;  data            1    1[COMMON] PTR unsigned char 
   514 ;;		 -> main@msg(6), 
   515 ;;  len             1    2[COMMON] unsigned char 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  i               1    4[COMMON] unsigned char 
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   527 ;;      Params:         2       0       0       0       0
   528 ;;      Locals:         1       0       0       0       0
   529 ;;      Temps:          1       0       0       0       0
   530 ;;      Totals:         4       0       0       0       0
   531 ;;Total ram usage:        4 bytes
   532 ;; Hardware stack levels used: 1
   533 ;; Hardware stack levels required when called: 1
   534 ;; This function calls:
   535 ;;		_SPI_Write
   536 ;; This function is called by:
   537 ;;		_main
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541     0721                     _NRF_WritePayload:	
   542                           ;psect for function _NRF_WritePayload
   543                           
   544     0721                     l669:	
   545                           ;incstack = 0
   546                           ; Regs used in _NRF_WritePayload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   547                           
   548                           
   549                           ;NRF24L01.c: 46:     RC1 = 0;
   550     0721  1283               	bcf	3,5	;RP0=0, select bank0
   551     0722  1303               	bcf	3,6	;RP1=0, select bank0
   552     0723  1087               	bcf	7,1	;volatile
   553     0724                     l671:
   554                           
   555                           ;NRF24L01.c: 47:     SPI_Write(0xA0);
   556     0724  30A0               	movlw	160
   557     0725  120A  118A  26F4  120A  118A  	fcall	_SPI_Write
   558     072A                     l673:
   559                           
   560                           ;NRF24L01.c: 48:     for(unsigned char i = 0; i < len; i++) {
   561     072A  01F4               	clrf	NRF_WritePayload@i
   562     072B  2F3A               	goto	l679
   563     072C                     l675:
   564                           
   565                           ;NRF24L01.c: 49:         SPI_Write(data[i]);
   566     072C  0874               	movf	NRF_WritePayload@i,w
   567     072D  0771               	addwf	NRF_WritePayload@data,w
   568     072E  00F3               	movwf	??_NRF_WritePayload
   569     072F  0873               	movf	??_NRF_WritePayload,w
   570     0730  0084               	movwf	4
   571     0731  1383               	bcf	3,7	;select IRP bank0
   572     0732  0800               	movf	0,w
   573     0733  120A  118A  26F4  120A  118A  	fcall	_SPI_Write
   574     0738                     l677:
   575                           
   576                           ;NRF24L01.c: 50:     }
   577     0738  3001               	movlw	1
   578     0739  07F4               	addwf	NRF_WritePayload@i,f
   579     073A                     l679:
   580     073A  0872               	movf	NRF_WritePayload@len,w
   581     073B  0274               	subwf	NRF_WritePayload@i,w
   582     073C  1C03               	skipc
   583     073D  2F3F               	goto	u41
   584     073E  2F40               	goto	u40
   585     073F                     u41:
   586     073F  2F2C               	goto	l675
   587     0740                     u40:
   588     0740                     l41:
   589                           
   590                           ;NRF24L01.c: 51:     RC1 = 1;
   591     0740  1283               	bcf	3,5	;RP0=0, select bank0
   592     0741  1303               	bcf	3,6	;RP1=0, select bank0
   593     0742  1487               	bsf	7,1	;volatile
   594     0743                     l42:
   595     0743  0008               	return
   596     0744                     __end_of_NRF_WritePayload:
   597                           
   598                           	psect	text3
   599     0744                     __ptext3:	
   600 ;; *************** function _NRF_InitTX *****************
   601 ;; Defined at:
   602 ;;		line 54 in file "NRF24L01.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;		None
   605 ;; Auto vars:     Size  Location     Type
   606 ;;		None
   607 ;; Return value:  Size  Location     Type
   608 ;;                  1    wreg      void 
   609 ;; Registers used:
   610 ;;		wreg, status,2, status,0, pclath, cstack
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   616 ;;      Params:         0       0       0       0       0
   617 ;;      Locals:         0       0       0       0       0
   618 ;;      Temps:          3       0       0       0       0
   619 ;;      Totals:         3       0       0       0       0
   620 ;;Total ram usage:        3 bytes
   621 ;; Hardware stack levels used: 1
   622 ;; Hardware stack levels required when called: 2
   623 ;; This function calls:
   624 ;;		_NRF_WriteReg
   625 ;; This function is called by:
   626 ;;		_main
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630     0744                     _NRF_InitTX:	
   631                           ;psect for function _NRF_InitTX
   632                           
   633     0744                     l681:	
   634                           ;incstack = 0
   635                           ; Regs used in _NRF_InitTX: [wreg+status,2+status,0+pclath+cstack]
   636                           
   637                           
   638                           ;NRF24L01.c: 55:     RC0 = 0;
   639     0744  1283               	bcf	3,5	;RP0=0, select bank0
   640     0745  1303               	bcf	3,6	;RP1=0, select bank0
   641     0746  1007               	bcf	7,0	;volatile
   642                           
   643                           ;NRF24L01.c: 56:     RC1 = 1;
   644     0747  1487               	bsf	7,1	;volatile
   645     0748                     l683:
   646                           
   647                           ;NRF24L01.c: 57:     _delay((unsigned long)((100)*(8000000/4000.0)));
   648     0748  3002               	movlw	2
   649     0749  00F5               	movwf	??_NRF_InitTX+2
   650     074A  3004               	movlw	4
   651     074B  00F4               	movwf	??_NRF_InitTX+1
   652     074C  30BA               	movlw	186
   653     074D  00F3               	movwf	??_NRF_InitTX
   654     074E                     u77:
   655     074E  0BF3               	decfsz	??_NRF_InitTX,f
   656     074F  2F4E               	goto	u77
   657     0750  0BF4               	decfsz	??_NRF_InitTX+1,f
   658     0751  2F4E               	goto	u77
   659     0752  0BF5               	decfsz	??_NRF_InitTX+2,f
   660     0753  2F4E               	goto	u77
   661     0754  0000               	nop
   662     0755                     l685:
   663                           
   664                           ;NRF24L01.c: 59:     NRF_WriteReg(0x00, 0x0A);
   665     0755  300A               	movlw	10
   666     0756  00F1               	movwf	NRF_WriteReg@value
   667     0757  3000               	movlw	0
   668     0758  120A  118A  270C  120A  118A  	fcall	_NRF_WriteReg
   669     075D                     l687:
   670                           
   671                           ;NRF24L01.c: 60:     NRF_WriteReg(0x01, 0x00);
   672     075D  01F1               	clrf	NRF_WriteReg@value
   673     075E  3001               	movlw	1
   674     075F  120A  118A  270C  120A  118A  	fcall	_NRF_WriteReg
   675     0764                     l689:
   676                           
   677                           ;NRF24L01.c: 61:     NRF_WriteReg(0x02, 0x01);
   678     0764  01F1               	clrf	NRF_WriteReg@value
   679     0765  0AF1               	incf	NRF_WriteReg@value,f
   680     0766  3002               	movlw	2
   681     0767  120A  118A  270C  120A  118A  	fcall	_NRF_WriteReg
   682     076C                     l691:
   683                           
   684                           ;NRF24L01.c: 62:     NRF_WriteReg(0x03, 0x03);
   685     076C  3003               	movlw	3
   686     076D  00F1               	movwf	NRF_WriteReg@value
   687     076E  3003               	movlw	3
   688     076F  120A  118A  270C  120A  118A  	fcall	_NRF_WriteReg
   689     0774                     l693:
   690                           
   691                           ;NRF24L01.c: 63:     NRF_WriteReg(0x04, 0x00);
   692     0774  01F1               	clrf	NRF_WriteReg@value
   693     0775  3004               	movlw	4
   694     0776  120A  118A  270C  120A  118A  	fcall	_NRF_WriteReg
   695     077B                     l695:
   696                           
   697                           ;NRF24L01.c: 64:     NRF_WriteReg(0x05, 76);
   698     077B  304C               	movlw	76
   699     077C  00F1               	movwf	NRF_WriteReg@value
   700     077D  3005               	movlw	5
   701     077E  120A  118A  270C  120A  118A  	fcall	_NRF_WriteReg
   702     0783                     l697:
   703                           
   704                           ;NRF24L01.c: 65:     NRF_WriteReg(0x06, 0x06);
   705     0783  3006               	movlw	6
   706     0784  00F1               	movwf	NRF_WriteReg@value
   707     0785  3006               	movlw	6
   708     0786  120A  118A  270C  120A  118A  	fcall	_NRF_WriteReg
   709     078B                     l45:
   710     078B  0008               	return
   711     078C                     __end_of_NRF_InitTX:
   712                           
   713                           	psect	text4
   714     070C                     __ptext4:	
   715 ;; *************** function _NRF_WriteReg *****************
   716 ;; Defined at:
   717 ;;		line 38 in file "NRF24L01.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;  reg             1    wreg     unsigned char 
   720 ;;  value           1    1[COMMON] unsigned char 
   721 ;; Auto vars:     Size  Location     Type
   722 ;;  reg             1    2[COMMON] unsigned char 
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, status,2, status,0, pclath, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   732 ;;      Params:         1       0       0       0       0
   733 ;;      Locals:         1       0       0       0       0
   734 ;;      Temps:          0       0       0       0       0
   735 ;;      Totals:         2       0       0       0       0
   736 ;;Total ram usage:        2 bytes
   737 ;; Hardware stack levels used: 1
   738 ;; Hardware stack levels required when called: 1
   739 ;; This function calls:
   740 ;;		_SPI_Write
   741 ;; This function is called by:
   742 ;;		_NRF_InitTX
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746     070C                     _NRF_WriteReg:	
   747                           ;psect for function _NRF_WriteReg
   748                           
   749                           
   750                           ;incstack = 0
   751                           ; Regs used in _NRF_WriteReg: [wreg+status,2+status,0+pclath+cstack]
   752                           ;NRF_WriteReg@reg stored from wreg
   753     070C  00F2               	movwf	NRF_WriteReg@reg
   754     070D                     l661:
   755                           
   756                           ;NRF24L01.c: 39:     RC1 = 0;
   757     070D  1283               	bcf	3,5	;RP0=0, select bank0
   758     070E  1303               	bcf	3,6	;RP1=0, select bank0
   759     070F  1087               	bcf	7,1	;volatile
   760     0710                     l663:
   761                           
   762                           ;NRF24L01.c: 40:     SPI_Write(0x20 | reg);
   763     0710  0872               	movf	NRF_WriteReg@reg,w
   764     0711  3820               	iorlw	32
   765     0712  120A  118A  26F4  120A  118A  	fcall	_SPI_Write
   766                           
   767                           ;NRF24L01.c: 41:     SPI_Write(value);
   768     0717  0871               	movf	NRF_WriteReg@value,w
   769     0718  120A  118A  26F4  120A  118A  	fcall	_SPI_Write
   770     071D                     l665:
   771                           
   772                           ;NRF24L01.c: 42:     RC1 = 1;
   773     071D  1283               	bcf	3,5	;RP0=0, select bank0
   774     071E  1303               	bcf	3,6	;RP1=0, select bank0
   775     071F  1487               	bsf	7,1	;volatile
   776     0720                     l36:
   777     0720  0008               	return
   778     0721                     __end_of_NRF_WriteReg:
   779                           
   780                           	psect	text5
   781     06F4                     __ptext5:	
   782 ;; *************** function _SPI_Write *****************
   783 ;; Defined at:
   784 ;;		line 33 in file "NRF24L01.c"
   785 ;; Parameters:    Size  Location     Type
   786 ;;  data            1    wreg     unsigned char 
   787 ;; Auto vars:     Size  Location     Type
   788 ;;  data            1    0[COMMON] unsigned char 
   789 ;; Return value:  Size  Location     Type
   790 ;;                  1    wreg      void 
   791 ;; Registers used:
   792 ;;		wreg
   793 ;; Tracked objects:
   794 ;;		On entry : 0/0
   795 ;;		On exit  : 0/0
   796 ;;		Unchanged: 0/0
   797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   798 ;;      Params:         0       0       0       0       0
   799 ;;      Locals:         1       0       0       0       0
   800 ;;      Temps:          0       0       0       0       0
   801 ;;      Totals:         1       0       0       0       0
   802 ;;Total ram usage:        1 bytes
   803 ;; Hardware stack levels used: 1
   804 ;; This function calls:
   805 ;;		Nothing
   806 ;; This function is called by:
   807 ;;		_NRF_WriteReg
   808 ;;		_NRF_WritePayload
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812     06F4                     _SPI_Write:	
   813                           ;psect for function _SPI_Write
   814                           
   815                           
   816                           ;incstack = 0
   817                           ; Regs used in _SPI_Write: [wreg]
   818                           ;SPI_Write@data stored from wreg
   819     06F4  00F0               	movwf	SPI_Write@data
   820     06F5                     l659:
   821                           
   822                           ;NRF24L01.c: 34:     SSPBUF = data;
   823     06F5  0870               	movf	SPI_Write@data,w
   824     06F6  1283               	bcf	3,5	;RP0=0, select bank0
   825     06F7  1303               	bcf	3,6	;RP1=0, select bank0
   826     06F8  0093               	movwf	19	;volatile
   827     06F9                     l30:	
   828                           ;NRF24L01.c: 35:     while(!SSPSTATbits.BF);
   829                           
   830     06F9  1683               	bsf	3,5	;RP0=1, select bank1
   831     06FA  1303               	bcf	3,6	;RP1=0, select bank1
   832     06FB  1C14               	btfss	20,0	;volatile
   833     06FC  2EFE               	goto	u31
   834     06FD  2EFF               	goto	u30
   835     06FE                     u31:
   836     06FE  2EF9               	goto	l30
   837     06FF                     u30:
   838     06FF                     l33:
   839     06FF  0008               	return
   840     0700                     __end_of_SPI_Write:
   841     0002                     ___latbits      equ	2
   842     007E                     btemp           set	126	;btemp
   843     007E                     wtemp0          set	126
   844                           
   845                           	psect	config
   846                           
   847                           ;Config register CONFIG @ 0x2007
   848                           ;	Oscillator Selection bits
   849                           ;	FOSC = EXTRC, RC oscillator
   850                           ;	Watchdog Timer Enable bit
   851                           ;	WDTE = OFF, WDT disabled
   852                           ;	Power-up Timer Enable bit
   853                           ;	PWRTE = OFF, PWRT disabled
   854                           ;	Brown-out Reset Enable bit
   855                           ;	BOREN = OFF, BOR disabled
   856                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   857                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   858                           ;	Data EEPROM Memory Code Protection bit
   859                           ;	CPD = OFF, Data EEPROM code protection off
   860                           ;	Flash Program Memory Write Enable bits
   861                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   862                           ;	In-Circuit Debugger Mode bit
   863                           ;	DEBUG = 0x1, unprogrammed default
   864                           ;	Flash Program Memory Code Protection bit
   865                           ;	CP = OFF, Code protection off
   866     2007                     	org	8199
   867     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      6      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    NRF_WritePayload@data	PTR unsigned char  size(1) Largest target is 6
		 -> main@msg(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_NRF_InitTX
    _NRF_WritePayload->_SPI_Write
    _NRF_InitTX->_NRF_WriteReg
    _NRF_WriteReg->_SPI_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0     232
                                              6 COMMON     3     3      0
                                              0 BANK0      6     6      0
                         _NRF_InitTX
                   _NRF_WritePayload
                           _SPI_Init
 ---------------------------------------------------------------------------------
 (1) _SPI_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NRF_WritePayload                                     4     2      2     121
                                              1 COMMON     4     2      2
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (1) _NRF_InitTX                                           3     3      0      87
                                              3 COMMON     3     3      0
                       _NRF_WriteReg
 ---------------------------------------------------------------------------------
 (2) _NRF_WriteReg                                         2     1      1      87
                                              1 COMMON     2     1      1
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (2) _SPI_Write                                            1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _NRF_InitTX
     _NRF_WriteReg
       _SPI_Write
   _NRF_WritePayload
     _SPI_Write
   _SPI_Init

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      6      12     15.0%
BITBANK0            80      0       0      0.0%
COMMON              14      9       9     64.3%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      21      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Jul 31 07:12:05 2025

             _SSPSTATbits 0094                        l30 06F9                        l33 06FF  
                      l41 0740                        l42 0743                        l27 070B  
                      l36 0720                        l45 078B                        u30 06FF  
                      u31 06FE                        u40 0740                        u41 073F  
                      u57 07C1                        u67 07CD                        u77 074E  
                     l701 0790                       l711 07BC                       l703 0795  
                     l713 07BF                       l705 079A                       l715 07C4  
                     l707 07B0                       l661 070D                       l717 07C7  
                     l709 07B3                       l663 0710                       l671 0724  
                     l665 071D                       l681 0744                       l673 072A  
                     l659 06F5                       l691 076C                       l683 0748  
                     l675 072C                       l667 0700                       l693 0774  
                     l685 0755                       l677 0738                       l669 0721  
                     l695 077B                       l687 075D                       l679 073A  
                     l697 0783                       l689 0764                       l699 078C  
                     _RC0 0038                       _RC1 0039                       fsr0 0004  
                     indf 0000           NRF_WriteReg@reg 0072                      _main 078C  
                    btemp 007E                      start 0000                     ?_main 0070  
             ?_NRF_InitTX 0070          __end_of_SPI_Init 070C                     status 0003  
                   wtemp0 007E         NRF_WriteReg@value 0071           __initialization 07D8  
            __end_of_main 07D8         NRF_WritePayload@i 0074                    ??_main 0076  
    NRF_WritePayload@data 0071                    _TRISC0 0438                    _TRISC1 0439  
                  _TRISC3 043B                    _TRISC4 043C                    _TRISC5 043D  
                  _SSPCON 0014                    _SSPBUF 0013  __end_of_NRF_WritePayload 0744  
       __end_of_SPI_Write 0700   __end_of__initialization 07FC            __pcstackCOMMON 0070  
            __pidataBANK0 06EE                 ?_SPI_Init 0070                __pmaintext 078C  
              ??_SPI_Init 0070              ??_NRF_InitTX 0073                   _SSPSTAT 0094  
           SPI_Write@data 0070        __end_of_NRF_InitTX 078C             ?_NRF_WriteReg 0071  
                 __ptext1 0700                   __ptext2 0721                   __ptext3 0744  
                 __ptext4 070C                   __ptext5 06F4                   main@msg 0026  
    end_of_initialization 07FC         ?_NRF_WritePayload 0071            ??_NRF_WriteReg 0072  
      ??_NRF_WritePayload 0073                 _SPI_Write 06F4       start_initialization 07D8  
              ?_SPI_Write 0070       NRF_WritePayload@len 0072               __pdataBANK0 0020  
               ___latbits 0002             __pcstackBANK0 0026      __end_of_NRF_WriteReg 0721  
             ??_SPI_Write 0070                 main@F1018 0020                  _SPI_Init 0700  
            _NRF_WriteReg 070C          _NRF_WritePayload 0721                _NRF_InitTX 0744  
